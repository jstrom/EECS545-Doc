/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifndef _observations_t_h
#define _observations_t_h

#ifdef __cplusplus
extern "C" {
#endif

#include "object_data_t.h"
typedef struct _observations_t observations_t;
struct _observations_t
{
    int64_t    utime;
    int32_t    click_id;
    int32_t    nobs;
    object_data_t *observations;
    int32_t    nsens;
    char*      *sensables;
};
 
observations_t   *observations_t_copy(const observations_t *p);
void observations_t_destroy(observations_t *p);

typedef struct _observations_t_subscription_t observations_t_subscription_t;
typedef void(*observations_t_handler_t)(const lcm_recv_buf_t *rbuf, 
             const char *channel, const observations_t *msg, void *user);

int observations_t_publish(lcm_t *lcm, const char *channel, const observations_t *p);
observations_t_subscription_t* observations_t_subscribe(lcm_t *lcm, const char *channel, observations_t_handler_t f, void *userdata);
int observations_t_unsubscribe(lcm_t *lcm, observations_t_subscription_t* hid);
int observations_t_subscription_set_queue_capacity(observations_t_subscription_t* subs, 
                              int num_messages);


int  observations_t_encode(void *buf, int offset, int maxlen, const observations_t *p);
int  observations_t_decode(const void *buf, int offset, int maxlen, observations_t *p);
int  observations_t_decode_cleanup(observations_t *p);
int  observations_t_encoded_size(const observations_t *p);

// LCM support functions. Users should not call these
int64_t __observations_t_get_hash(void);
int64_t __observations_t_hash_recursive(const __lcm_hash_ptr *p);
int     __observations_t_encode_array(void *buf, int offset, int maxlen, const observations_t *p, int elements);
int     __observations_t_decode_array(const void *buf, int offset, int maxlen, observations_t *p, int elements);
int     __observations_t_decode_array_cleanup(observations_t *p, int elements);
int     __observations_t_encoded_array_size(const observations_t *p, int elements);
int     __observations_t_clone_array(const observations_t *p, observations_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
