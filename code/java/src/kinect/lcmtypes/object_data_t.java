/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package kinect.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class object_data_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int id;
    public int nj_len;
    public String nounjectives[];
    public double pos[];
 
    public object_data_t()
    {
        pos = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa9c99838e0a26959L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(kinect.lcmtypes.object_data_t.class))
            return 0L;
 
        classes.add(kinect.lcmtypes.object_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.id); 
 
        outs.writeInt(this.nj_len); 
 
        for (int a = 0; a < this.nj_len; a++) {
            __strbuf = new char[this.nounjectives[a].length()]; this.nounjectives[a].getChars(0, this.nounjectives[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.pos[a]); 
        }
 
    }
 
    public object_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public object_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static kinect.lcmtypes.object_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        kinect.lcmtypes.object_data_t o = new kinect.lcmtypes.object_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.id = ins.readInt();
 
        this.nj_len = ins.readInt();
 
        this.nounjectives = new String[(int) nj_len];
        for (int a = 0; a < this.nj_len; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.nounjectives[a] = new String(__strbuf);
        }
 
        this.pos = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pos[a] = ins.readDouble();
        }
 
    }
 
    public kinect.lcmtypes.object_data_t copy()
    {
        kinect.lcmtypes.object_data_t outobj = new kinect.lcmtypes.object_data_t();
        outobj.utime = this.utime;
 
        outobj.id = this.id;
 
        outobj.nj_len = this.nj_len;
 
        outobj.nounjectives = new String[(int) nj_len];
        if (this.nj_len > 0)
            System.arraycopy(this.nounjectives, 0, outobj.nounjectives, 0, this.nj_len); 
        outobj.pos = new double[(int) 6];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 6); 
        return outobj;
    }
 
}

