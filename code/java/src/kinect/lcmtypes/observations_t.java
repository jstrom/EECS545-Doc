/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package kinect.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class observations_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int click_id;
    public int nobs;
    public kinect.lcmtypes.object_data_t observations[];
    public int nsens;
    public String sensables[];
 
    public observations_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x52c00f0dc547f388L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(kinect.lcmtypes.observations_t.class))
            return 0L;
 
        classes.add(kinect.lcmtypes.observations_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + kinect.lcmtypes.object_data_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.click_id); 
 
        outs.writeInt(this.nobs); 
 
        for (int a = 0; a < this.nobs; a++) {
            this.observations[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.nsens); 
 
        for (int a = 0; a < this.nsens; a++) {
            __strbuf = new char[this.sensables[a].length()]; this.sensables[a].getChars(0, this.sensables[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public observations_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public observations_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static kinect.lcmtypes.observations_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        kinect.lcmtypes.observations_t o = new kinect.lcmtypes.observations_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.click_id = ins.readInt();
 
        this.nobs = ins.readInt();
 
        this.observations = new kinect.lcmtypes.object_data_t[(int) nobs];
        for (int a = 0; a < this.nobs; a++) {
            this.observations[a] = kinect.lcmtypes.object_data_t._decodeRecursiveFactory(ins);
        }
 
        this.nsens = ins.readInt();
 
        this.sensables = new String[(int) nsens];
        for (int a = 0; a < this.nsens; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.sensables[a] = new String(__strbuf);
        }
 
    }
 
    public kinect.lcmtypes.observations_t copy()
    {
        kinect.lcmtypes.observations_t outobj = new kinect.lcmtypes.observations_t();
        outobj.utime = this.utime;
 
        outobj.click_id = this.click_id;
 
        outobj.nobs = this.nobs;
 
        outobj.observations = new kinect.lcmtypes.object_data_t[(int) nobs];
        for (int a = 0; a < this.nobs; a++) {
            outobj.observations[a] = this.observations[a].copy();
        }
 
        outobj.nsens = this.nsens;
 
        outobj.sensables = new String[(int) nsens];
        if (this.nsens > 0)
            System.arraycopy(this.sensables, 0, outobj.sensables, 0, this.nsens); 
        return outobj;
    }
 
}

